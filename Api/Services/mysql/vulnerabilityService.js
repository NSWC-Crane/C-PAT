/*
!#######################################################################
! C-PATTM SOFTWARE
! CRANE C-PATTM plan of action and milestones software. Use is governed by the Open Source Academic Research License Agreement contained in the file
! crane_C_PAT.1_license.txt, which is part of this software package. BY
! USING OR MODIFYING THIS SOFTWARE, YOU ARE AGREEING TO THE TERMS AND    
! CONDITIONS OF THE LICENSE.  
!########################################################################
*/

'use strict';
const config = require('../../utils/config')
const dbUtils = require('./utils')
const mysql = require('mysql2')

exports.getPoamsByVulnerabilityId = async function getPoamsByVulnerabilityId(req, res, next) {
    if (!req.params.vulnerabilityId) {
        console.info('getPoamsByVulnerabilityId; vulnerabilityId not provided.');
        return next({
            status: 422,
            errors: {
                ownerId: 'is required',
            }
        });
    }

    try {
        let connection
        connection = await dbUtils.pool.getConnection()
        let sql = "SELECT * FROM poamtracking.poam WHERE vulnerabilityId = ? ORDER BY poamId DESC";

        let [rowPoams] = await connection.query(sql, [req.params.vulnerabilityId]);
        await connection.release()

        var size = Object.keys(rowPoams).length

        var poams = []

        for (let counter = 0; counter < size; counter++) {
            poams.push({
                ...rowPoams[counter]
            });
        }

        return { poams };

    }
    catch (error) {
        let errorResponse = { null: "null" }
        return errorResponse;
    }
}

exports.getExistingVulnerabilityPoams = async function getExistingVulnerabilityPoams(req, res, next) {
    try {
        let connection
        connection = await dbUtils.pool.getConnection()
        let sql = "SELECT poamId, vulnerabilityId FROM poamtracking.poam ORDER BY poamId DESC";

        let [rowExistingPoams] = await connection.query(sql);
        await connection.release()

        var size = Object.keys(rowExistingPoams).length

        var existingPoams = []

        for (let counter = 0; counter < size; counter++) {
            existingPoams.push({
                ...rowExistingPoams[counter]
            });
        }

        return { existingPoams };
    }
    catch (error) {
        let errorResponse = { null: "null" }
        return errorResponse;
    }
}