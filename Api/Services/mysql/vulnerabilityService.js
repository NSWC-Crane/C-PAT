/*
!#######################################################################
! C-PATTM SOFTWARE
! CRANE C-PATTM plan of action and milestones software. Use is governed by the Open Source Academic Research License Agreement contained in the file
! crane_C_PAT.1_license.txt, which is part of this software package. BY
! USING OR MODIFYING THIS SOFTWARE, YOU ARE AGREEING TO THE TERMS AND    
! CONDITIONS OF THE LICENSE.  
!########################################################################
*/

'use strict';
const config = require('../../utils/config');
const dbUtils = require('./utils');
const mysql = require('mysql2');

async function withConnection(callback) {
    const pool = dbUtils.getPool();
	const connection = await pool.getConnection();
    try {
        return await callback(connection);
    } finally {
        await connection.release();
    }
}

exports.getPoamsByVulnerabilityId = async function getPoamsByVulnerabilityId(req, res, next) {
    if (!req.params.vulnerabilityId) {
        console.info('getPoamsByVulnerabilityId; vulnerabilityId not provided.');
        return next({
            status: 422,
            errors: {
                ownerId: 'is required',
            }
        });
    }

    try {
        return await withConnection(async (connection) => {
            let sql = "SELECT * FROM poamtracking.poam WHERE vulnerabilityId = ? ORDER BY poamId DESC";
            let [rowPoams] = await connection.query(sql, [req.params.vulnerabilityId]);
            var poams = rowPoams.map(row => ({ ...row }));
            return { poams };
        });
    } catch (error) {
        console.error(error);
        return { null: "null" };
    }
};

exports.getExistingVulnerabilityPoams = async function getExistingVulnerabilityPoams(req, res, next) {
    try {
        return await withConnection(async (connection) => {
            let sql = "SELECT poamId, vulnerabilityId FROM poamtracking.poam ORDER BY poamId DESC";
            let [rowExistingPoams] = await connection.query(sql);
            var existingPoams = rowExistingPoams.map(row => ({ ...row }));
            return { existingPoams };
        });
    } catch (error) {
        console.error(error);
        return { null: "null" };
    }
};