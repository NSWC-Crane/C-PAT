/*
!##########################################################################
! CRANE PLAN OF ACTION AND MILESTONE AUTOMATION TOOL (C-PAT) SOFTWARE
! Use is governed by the Open Source Academic Research License Agreement
! contained in the LICENSE.MD file, which is part of this software package.
! BY USING OR MODIFYING THIS SOFTWARE, YOU ARE AGREEING TO THE TERMS AND
! CONDITIONS OF THE LICENSE.
!##########################################################################
*/

'use strict';
const config = require('../utils/config');
const dbUtils = require('./utils');
const mysql = require('mysql2');

async function withConnection(callback) {
	const connection = await dbUtils.pool.getConnection();
    try {
        return await callback(connection);
    } finally {
        await connection.release();
    }
}

exports.getPoamsByVulnerabilityId = async function getPoamsByVulnerabilityId(req, res, next) {
    if (!req.params.vulnerabilityId) {
        return next({
            status: 400,
            errors: {
                vulnerabilityId: 'is required',
            }
        });
    }

    try {
        return await withConnection(async (connection) => {
            let sql = `SELECT * FROM ${config.database.schema}.poam WHERE vulnerabilityId = ? ORDER BY poamId DESC`;
            let [rowPoams] = await connection.query(sql, [req.params.vulnerabilityId]);
            const poams = rowPoams.map(row => ({
                ...row,
                scheduledCompletionDate: row.scheduledCompletionDate ? row.scheduledCompletionDate.toISOString() : null, submittedDate: row.submittedDate ? row.submittedDate.toISOString() : null,
                closedDate: row.closedDate ? row.closedDate.toISOString() : null,
                iavComplyByDate: row.iavComplyByDate ? row.iavComplyByDate.toISOString() : null
            }));
            return poams || null;
        });
    } catch (error) {
        return { error: error.message };
    }
};

exports.getExistingVulnerabilityPoams = async function getExistingVulnerabilityPoams(req, res, next) {
    try {
        return await withConnection(async (connection) => {
            let sql = `
                SELECT poamId, status, vulnerabilityId
                FROM ${config.database.schema}.poam
                UNION ALL
                SELECT p.poamId, 'Associated' as status, p.associatedVulnerability as vulnerabilityId
                FROM ${config.database.schema}.poamassociatedvulnerabilities p
                WHERE NOT EXISTS (
                    SELECT 1
                    FROM ${config.database.schema}.poam
                    WHERE vulnerabilityId = p.associatedVulnerability
                )
                ORDER BY poamId;
            `;
            let [PluginIDs] = await connection.query(sql);
            return PluginIDs;
        });
    } catch (error) {
        return { error: error.message };
    }
};